package com.educareapps.jsonreader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.educareapps.jsonreader.dao.AllGrid;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALL_GRID".
*/
public class AllGridDao extends AbstractDao<AllGrid, Long> {

    public static final String TABLENAME = "ALL_GRID";

    /**
     * Properties of entity AllGrid.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property TaskPackId = new Property(2, long.class, "taskPackId", false, "TASK_PACK_ID");
        public final static Property LessonNumber = new Property(3, int.class, "lessonNumber", false, "LESSON_NUMBER");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Status = new Property(6, boolean.class, "status", false, "STATUS");
    };


    public AllGridDao(DaoConfig config) {
        super(config);
    }
    
    public AllGridDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALL_GRID\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"TASK_PACK_ID\" INTEGER NOT NULL ," + // 2: taskPackId
                "\"LESSON_NUMBER\" INTEGER NOT NULL ," + // 3: lessonNumber
                "\"TYPE\" TEXT NOT NULL ," + // 4: type
                "\"DESCRIPTION\" TEXT NOT NULL ," + // 5: description
                "\"STATUS\" INTEGER NOT NULL );"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALL_GRID\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AllGrid entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
        stmt.bindLong(3, entity.getTaskPackId());
        stmt.bindLong(4, entity.getLessonNumber());
        stmt.bindString(5, entity.getType());
        stmt.bindString(6, entity.getDescription());
        stmt.bindLong(7, entity.getStatus() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AllGrid readEntity(Cursor cursor, int offset) {
        AllGrid entity = new AllGrid( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.getLong(offset + 2), // taskPackId
            cursor.getInt(offset + 3), // lessonNumber
            cursor.getString(offset + 4), // type
            cursor.getString(offset + 5), // description
            cursor.getShort(offset + 6) != 0 // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AllGrid entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTaskPackId(cursor.getLong(offset + 2));
        entity.setLessonNumber(cursor.getInt(offset + 3));
        entity.setType(cursor.getString(offset + 4));
        entity.setDescription(cursor.getString(offset + 5));
        entity.setStatus(cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AllGrid entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AllGrid entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
