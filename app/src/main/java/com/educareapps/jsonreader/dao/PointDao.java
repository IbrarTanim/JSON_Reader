package com.educareapps.jsonreader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.educareapps.jsonreader.dao.Point;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT".
*/
public class PointDao extends AbstractDao<Point, Long> {

    public static final String TABLENAME = "POINT";

    /**
     * Properties of entity Point.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property TaskPackId = new Property(2, Long.class, "taskPackId", false, "TASK_PACK_ID");
        public final static Property LessonNumber = new Property(3, Integer.class, "lessonNumber", false, "LESSON_NUMBER");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property PackRT = new Property(6, Long.class, "packRT", false, "PACK_RT");
        public final static Property PackDT = new Property(7, Long.class, "packDT", false, "PACK_DT");
        public final static Property PackPoint = new Property(8, Integer.class, "packPoint", false, "PACK_POINT");
        public final static Property ErrorSize = new Property(9, Integer.class, "errorSize", false, "ERROR_SIZE");
        public final static Property PackSize = new Property(10, Integer.class, "PackSize", false, "PACK_SIZE");
        public final static Property PackAnsSize = new Property(11, Integer.class, "PackAnsSize", false, "PACK_ANS_SIZE");
        public final static Property InsertedDateMillis = new Property(12, Long.class, "insertedDateMillis", false, "INSERTED_DATE_MILLIS");
    };


    public PointDao(DaoConfig config) {
        super(config);
    }
    
    public PointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"TASK_PACK_ID\" INTEGER," + // 2: taskPackId
                "\"LESSON_NUMBER\" INTEGER," + // 3: lessonNumber
                "\"TYPE\" TEXT," + // 4: type
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"PACK_RT\" INTEGER," + // 6: packRT
                "\"PACK_DT\" INTEGER," + // 7: packDT
                "\"PACK_POINT\" INTEGER," + // 8: packPoint
                "\"ERROR_SIZE\" INTEGER," + // 9: errorSize
                "\"PACK_SIZE\" INTEGER," + // 10: PackSize
                "\"PACK_ANS_SIZE\" INTEGER," + // 11: PackAnsSize
                "\"INSERTED_DATE_MILLIS\" INTEGER);"); // 12: insertedDateMillis
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Point entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long taskPackId = entity.getTaskPackId();
        if (taskPackId != null) {
            stmt.bindLong(3, taskPackId);
        }
 
        Integer lessonNumber = entity.getLessonNumber();
        if (lessonNumber != null) {
            stmt.bindLong(4, lessonNumber);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Long packRT = entity.getPackRT();
        if (packRT != null) {
            stmt.bindLong(7, packRT);
        }
 
        Long packDT = entity.getPackDT();
        if (packDT != null) {
            stmt.bindLong(8, packDT);
        }
 
        Integer packPoint = entity.getPackPoint();
        if (packPoint != null) {
            stmt.bindLong(9, packPoint);
        }
 
        Integer errorSize = entity.getErrorSize();
        if (errorSize != null) {
            stmt.bindLong(10, errorSize);
        }
 
        Integer PackSize = entity.getPackSize();
        if (PackSize != null) {
            stmt.bindLong(11, PackSize);
        }
 
        Integer PackAnsSize = entity.getPackAnsSize();
        if (PackAnsSize != null) {
            stmt.bindLong(12, PackAnsSize);
        }
 
        Long insertedDateMillis = entity.getInsertedDateMillis();
        if (insertedDateMillis != null) {
            stmt.bindLong(13, insertedDateMillis);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Point readEntity(Cursor cursor, int offset) {
        Point entity = new Point( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // taskPackId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // lessonNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // packRT
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // packDT
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // packPoint
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // errorSize
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // PackSize
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // PackAnsSize
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // insertedDateMillis
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Point entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTaskPackId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLessonNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPackRT(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setPackDT(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setPackPoint(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setErrorSize(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setPackSize(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setPackAnsSize(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setInsertedDateMillis(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Point entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Point entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
