package com.educareapps.jsonreader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.educareapps.jsonreader.dao.DailyTbl;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAILY_TBL".
*/
public class DailyTblDao extends AbstractDao<DailyTbl, Long> {

    public static final String TABLENAME = "DAILY_TBL";

    /**
     * Properties of entity DailyTbl.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property GreenTaskPackId = new Property(2, Long.class, "greenTaskPackId", false, "GREEN_TASK_PACK_ID");
        public final static Property BlueTaskPackId = new Property(3, Long.class, "blueTaskPackId", false, "BLUE_TASK_PACK_ID");
        public final static Property PinkTaskPackId = new Property(4, Long.class, "pinkTaskPackId", false, "PINK_TASK_PACK_ID");
        public final static Property PurpleTaskPackId = new Property(5, Long.class, "purpleTaskPackId", false, "PURPLE_TASK_PACK_ID");
        public final static Property OrangeTaskPackId = new Property(6, Long.class, "orangeTaskPackId", false, "ORANGE_TASK_PACK_ID");
        public final static Property YellowTaskPackId = new Property(7, Long.class, "yellowTaskPackId", false, "YELLOW_TASK_PACK_ID");
    };


    public DailyTblDao(DaoConfig config) {
        super(config);
    }
    
    public DailyTblDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAILY_TBL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"GREEN_TASK_PACK_ID\" INTEGER," + // 2: greenTaskPackId
                "\"BLUE_TASK_PACK_ID\" INTEGER," + // 3: blueTaskPackId
                "\"PINK_TASK_PACK_ID\" INTEGER," + // 4: pinkTaskPackId
                "\"PURPLE_TASK_PACK_ID\" INTEGER," + // 5: purpleTaskPackId
                "\"ORANGE_TASK_PACK_ID\" INTEGER," + // 6: orangeTaskPackId
                "\"YELLOW_TASK_PACK_ID\" INTEGER);"); // 7: yellowTaskPackId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAILY_TBL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DailyTbl entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        Long greenTaskPackId = entity.getGreenTaskPackId();
        if (greenTaskPackId != null) {
            stmt.bindLong(3, greenTaskPackId);
        }
 
        Long blueTaskPackId = entity.getBlueTaskPackId();
        if (blueTaskPackId != null) {
            stmt.bindLong(4, blueTaskPackId);
        }
 
        Long pinkTaskPackId = entity.getPinkTaskPackId();
        if (pinkTaskPackId != null) {
            stmt.bindLong(5, pinkTaskPackId);
        }
 
        Long purpleTaskPackId = entity.getPurpleTaskPackId();
        if (purpleTaskPackId != null) {
            stmt.bindLong(6, purpleTaskPackId);
        }
 
        Long orangeTaskPackId = entity.getOrangeTaskPackId();
        if (orangeTaskPackId != null) {
            stmt.bindLong(7, orangeTaskPackId);
        }
 
        Long yellowTaskPackId = entity.getYellowTaskPackId();
        if (yellowTaskPackId != null) {
            stmt.bindLong(8, yellowTaskPackId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DailyTbl readEntity(Cursor cursor, int offset) {
        DailyTbl entity = new DailyTbl( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // greenTaskPackId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // blueTaskPackId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // pinkTaskPackId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // purpleTaskPackId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // orangeTaskPackId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // yellowTaskPackId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DailyTbl entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setGreenTaskPackId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBlueTaskPackId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPinkTaskPackId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPurpleTaskPackId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setOrangeTaskPackId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setYellowTaskPackId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DailyTbl entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DailyTbl entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
